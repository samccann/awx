import os

import argparse

from docutils.nodes import Text, paragraph
from sphinxcontrib.autoprogram import AutoprogramDirective


from docutils import nodes
from docutils.statemachine import StringList, ViewList
from sphinx.util.nodes import nested_parse_with_titles

class CustomAutoprogramDirective(AutoprogramDirective):
    def run(self):
     #   nodes = super(CustomAutoprogramDirective, self).run()

        node = nodes.section()
        node.document = self.state.document
        result = ViewList()
        for line in self.make_rst():
            result.append(line, "<autoprogram>")
        nested_parse_with_titles(self.state, result, node)
    
        # By default, the document generated by sphinxcontrib.autoprogram
        # just has a page title which is the program name ("awx")
        # The code here changes this slightly so the reference guide starts
        # with a human-friendly title and preamble

        # configure a custom page heading (not `awx`)
    
        heading = Text('AWX CLI Guide')
        heading.parent = node.children[0][0]
        node.children[0][0].children = [heading]

        # add a descriptive top synopsis of the reference guide
        node.children[0].children.insert(1, paragraph(text=('This is an fun exhaustive guide of every available command in the awx CLI tool.')))
        disclaimer = (
            'The commands and parameters documented here can (and will) '
            'vary based on a variety of factors, such as the AWX API '
            'version, AWX settings, and access level of the authenticated '
            'user.  For the most accurate view of available commands, '
            'invoke the awx CLI using the --help flag.'
        )
        node.children[0].children.insert(2, paragraph(text=disclaimer))
        return node.children
    


def render():
    parser = argparse.ArgumentParser(prog='cli', description='Process some integers.')
    parser.add_argument('integers', metavar='N', type=int, nargs='+',
                    help='An integer for the accumulator.')
    parser.add_argument('-i', '--identity', type=int, default=0,
                    help='the default result for no arguments '
                         '(default: 0)')
    parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='Sum the integers (default: find the max).')

    if __name__ == '__main__':
        args = parser.parse_args()
        print(args.accumulate(args.integers))
    return parser


def setup(app):
    app.add_directive('autoprogram', CustomAutoprogramDirective)


parser = render()
